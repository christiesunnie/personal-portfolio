// // Credit this animation to https://codepen.io/brandonmcconnell/pen/bZqGdw
// $strings: (
//     "Front End Web Developer" "Motorcycle Biker 🏍" "Nice to meet you 😀"
// );

// // now for some timing (in seconds)
// $timeCharType: 0.1; // character typed
// $timeChangeStr: 1.5; // time between typed/delete
// $timeCharDel: 0.05; // character deleted
// $timeChangeSent: 0.8; // time between strings

// // initializing some variables and functions ✊🏼
// $charCount: 0;
// $durTotal: 0;
// @each $string in $strings {
//     $charCount: $charCount + str-length($string);
//     $durTotal: $durTotal +
//         (str-length($string) * ($timeCharType + $timeCharDel)) +
//         $timeChangeStr +
//         $timeChangeSent;
// }
// @function percent($string, $letter, $modifier) {
//     $stringsPast: $string - 1;
//     $time: 0;
//     @while $stringsPast > 0 {
//         $time: $time +
//             (
//                 ($timeCharType + $timeCharDel) *
//                     (str-length(nth($strings, $stringsPast)))
//             ) +
//             $timeChangeStr +
//             $timeChangeSent;
//         $stringsPast: $stringsPast - 1;
//     }
//     @if $letter <= str-length(nth($strings, $string)) {
//         $time: $time + ($timeCharType * ($letter - 1));
//     } @else {
//         $time: $time +
//             ($timeCharType * str-length(nth($strings, $string))) +
//             $timeChangeStr +
//             ($timeCharDel * ($letter - str-length(nth($strings, $string))));
//     }
//     @return ($time / $durTotal * 100 + $modifier) + "%";
// }
// $currentPercentage: 0;
// // now THIS is where the magic happens... ✨
// @keyframes typed {
//     @for $i from 1 through length($strings) {
//         @for $j from 1 through (str-length(nth($strings, $i)) * 2) {
//             @if $j < str-length(nth($strings, $i)) * 2 {
//                 #{percent($i, $j, 0)},
//                 #{percent($i, $j+1, -0.001)} {
//                     @if $j <= str-length(nth($strings, $i)) {
//                         content: quote(#{str_slice(nth($strings, $i), 1, $j)});
//                     } @else {
//                         content: quote(
//                             #{str_slice(
//                                     nth($strings, $i),
//                                     1,
//                                     str-length(nth($strings, $i)) -
//                                         ($j - str-length(nth($strings, $i)))
//                                 )}
//                         );
//                     }
//                 }
//             } @else {
//                 @if $i < length($strings) {
//                     #{percent($i, $j, 0)},
//                     #{percent($i+1, 1, -0.001)} {
//                         content: "​";
//                     }
//                 } @else {
//                     // last string
//                     #{percent($i, $j, 0)},
//                     100% {
//                         content: "​";
//                     }
//                 }
//             }
//         }
//     }
// }
// @keyframes beam-blink {
//     75% {
//         border-color: transparent;
//     }
// }

$strings: ("CSS typed this string!" "It typed this one too 😱" "Enjoy ☕");

// now for some timing (in seconds)
$durCharFwd: 0.1; // character typed
$durFullGap: 2; // time between typed/delete
$durCharBwd: 0.08; // character deleted
$durDoneGap: 1; // time between strings

// initializing some variables and functions ✊🏼
$charCount: 0;
$durTotal: 0;
@each $string in $strings {
    $charCount: $charCount + str-length($string);
    $durTotal: $durTotal +
        (str-length($string) * ($durCharFwd + $durCharBwd)) +
        $durFullGap +
        $durDoneGap;
}
@function percent($string, $letter, $modifier) {
    $stringsPast: $string - 1;
    $time: 0;
    @while $stringsPast > 0 {
        $time: $time +
            (
                ($durCharFwd + $durCharBwd) *
                    (str-length(nth($strings, $stringsPast)))
            ) +
            $durFullGap +
            $durDoneGap;
        $stringsPast: $stringsPast - 1;
    }
    @if $letter <= str-length(nth($strings, $string)) {
        $time: $time + ($durCharFwd * ($letter - 1));
    } @else {
        $time: $time +
            ($durCharFwd * str-length(nth($strings, $string))) +
            $durFullGap +
            ($durCharBwd * ($letter - str-length(nth($strings, $string))));
    }
    @return ($time / $durTotal * 100 + $modifier) + "%";
}
$currentPercentage: 0;
// now THIS is where the magic happens... ✨
@keyframes typed {
    @for $i from 1 through length($strings) {
        // @for $j from 1 through (str-length(nth($strings, $i)) * 2 - 1) {
        @for $j from 1 through (str-length(nth($strings, $i)) * 2) {
            /* string #{$i}, char #{$j} */
            @if $j < str-length(nth($strings, $i)) * 2 {
                // not last character deleted
                #{percent($i, $j, 0)},
                #{percent($i, $j+1, -0.001)} {
                    @if $j <= str-length(nth($strings, $i)) {
                        content: quote(#{str_slice(nth($strings, $i), 1, $j)});
                    } @else {
                        content: quote(
                            #{str_slice(
                                    nth($strings, $i),
                                    1,
                                    str-length(nth($strings, $i)) -
                                        ($j - str-length(nth($strings, $i)))
                                )}
                        );
                    }
                }
            } @else {
                @if $i < length($strings) {
                    // not last string
                    #{percent($i, $j, 0)},
                    #{percent($i+1, 1, -0.001)} {
                        content: "​"; // zero-width space to retain element height
                    }
                } @else {
                    // last string
                    #{percent($i, $j, 0)},
                    100% {
                        content: "​"; // zero-width space to retain element height
                    }
                }
            }
        }
    }
}
@keyframes beam-blink {
    75% {
        border-color: transparent;
    }
}
* {
    backface-visibility: hidden;
}
// html,
// body {
//     height: 100%;
// }
.home {
    height: 100%;
    // display: flex;
    // align-items: center;
    // justify-content: center;
    // background-color: #000;
    // background-image: // skeuomorphism anyone?
    //     radial-gradient(rgba(#fff, 0.125), rgba(#fff, 0)),
    //     linear-gradient(to bottom, #000, #000 2px, #111 3px);
    // background-repeat: repeat-y;
    // background-position: center center;
    // background-size: cover, 100% 3px;
    font-size: calc(10px + 2vw);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    &::after {
        content: "​"; // zero-width space to retain element height
        position: relative;
        top: -13px;
        @media (max-width: 575px) {
            top: -33px;
        }
        display: inline-block;
        padding-right: 3px;
        padding-right: calc(3px + 0.1vw);
        border-right: 10px solid rgba(#3f3, 0.75);
        border-right: calc(1.1vw + 4px) solid rgba(#3f3, 0.75);
        text-shadow: 0 0 5px rgba(51, 255, 51, 0.75);
        white-space: nowrap;
        animation: typed #{$durTotal + "s"} linear 1s infinite,
            beam-blink 1s infinite;
    }
    // &::before { // just generating some useful stats here 👋🏼
    // 	content: "#{length($strings)} strings / #{$charCount} chars / #{$durTotal}s duration";
    // 	@media (max-width: 575px) {
    // 		content: "#{length($strings)} strings \A #{$charCount} chars \A #{$durTotal}s duration";
    // 	}
    // 	display: block;
    // 	position: absolute;
    // 	bottom: 0;
    // 	width: 100%;
    // 	padding: 3px 0;
    // 	background: #00f; // aquaman blue
    // 	color: #fff; // Brandon-McConnell white
    // 	text-align: center;
    // 	font-size: 18px;
    // 	letter-spacing: 0.7px;
    // 	white-space: pre-wrap;
    // }
}

.home {
    height: 100vh;
    padding-top: 25vh;
    background: linear-gradient(to bottom, rgba($primary-color, 0.45)),
        url(https://1.bp.blogspot.com/-51dL74QTW0s/Ucx5qyYlBAI/AAAAAAAAWgk/IT7vwn51zHU/s1280/Sunflowers+Desktop+Wallpapers+%25282%2529.jpg)
            center top;
    background-size: cover;
    text-align: center;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    // &::after {
    //     content: "​";
    //     position: relative;
    //     top: -60px;
    //     display: inline-block;
    //     padding-right: 3px;
    //     padding-right: calc(3px + 0.1vw);
    //     border-right: 10px solid rgba(#3f3, 0.75);
    //     border-right: calc(1.1vw + 4px) solid rgba(#3f3, 0.75);
    //     white-space: nowrap;
    //     font-weight: 700;
    //     font-size: 1.1rem;
    //     animation: typed #{$durTotal + "s"} linear 1s infinite,
    //         beam-blink 1s infinite;
    // }

    &-name {
        padding: 5px 0 20px 0;
        text-decoration: underline;
        font-size: 2rem;
    }

    &-name--first {
        color: lighten($secondary-color, 25%);
    }

    h2 {
        text-transform: capitalize;
        font-size: 1rem;
    }
}

.button-link {
    position: relative;
    top: 40vh;
}

.button-down {
    cursor: pointer;
    animation: bounce 1s infinite;
}

.button-down:hover,
.button-down:focus {
    color: #000;
}

@keyframes bounce {
    0% {
        transform: scale(1);
    }

    50% {
        transform: scale(0.8);
    }

    100% {
        transform: scale(1);
    }
}
